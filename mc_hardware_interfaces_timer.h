#pragma once

#include "stdint.h"

//**********************************************************************
// Таймер предназначен только для генерации прямоугольных испульсов
// на одном канале.
// Модуль умеет только задвавать период испульсов, включать/отключать генерацию.
// В случае, если нужено настроить модуль на другую частоту -
// используется другой объект.
//**********************************************************************
class TimCompOneChannelBase {
public:
	//**********************************************************************
	// Метод должен:
	// 1. Отключить таймер.
	// 2. Заполнить все необходимые регистры.
	// Замечание: таймер при этом остается в отключенном состоянии.
	//**********************************************************************
	virtual bool reinit		( uint32_t cfg_number = 0 )			= 0;

	//**********************************************************************
	// Методы должены включать/отключать таймер
	// (не перетерая поля регистров).
	//**********************************************************************
	virtual bool on			( void )							= 0;
	virtual bool off		( void )							= 0;
};

/*!
 * Таймер просто считает вверх.
 */
class TimCounterBase {
public:
	//**********************************************************************
	// Метод должен:
	// 1. Отключить таймер.
	// 2. Заполнить все необходимые регистры.
	// Замечание: таймер при этом остается в отключенном состоянии.
	//**********************************************************************
	virtual	bool		reinit				( uint32_t cfg_number = 0 )		= 0;

	//**********************************************************************
	// Методы должены включать/отключать таймер
	// (не перетерая поля регистров).
	//**********************************************************************
	virtual	bool		on					( void )						= 0;
	virtual	bool		off					( void )						= 0;

	virtual	uint32_t	getCounter			( void )						= 0;
};

//**********************************************************************
// Таймер предназначен только для генерации прерываний.
//**********************************************************************
class TimInterruptBase {
public:
	//**********************************************************************
	// Метод должен:
	// 1. Отключить таймер.
	// 2. Заполнить все необходимые регистры.
	// Замечание: таймер при этом остается в отключенном состоянии.
	//**********************************************************************
	virtual bool reinit					( uint32_t cfg_number = 0 )		= 0;

	//**********************************************************************
	// Методы должены включать/отключать таймер
	// (не перетерая поля регистров).
	//**********************************************************************
	virtual bool on						( void )						= 0;
	virtual bool off					( void )						= 0;

	//**********************************************************************
	// Метод должен сбрасывать флаг прерывания и совершаеть все необходимые
	// действия чтобы можно было успешно выйти из прерывания.
	//**********************************************************************
	virtual void clearInterruptFlag		( void )						= 0;
};

//**********************************************************************
// Таймер предназначен только для генерации PWM на одном канале.
//**********************************************************************
class TimPwmOneChannelBase {
public:
	//**********************************************************************
	// Метод должен:
	// 1. Отключить таймер.
	// 2. Заполнить все необходимые регистры.
	// Замечание: таймер при этом остается в отключенном состоянии.
	//**********************************************************************
	virtual bool reinit					( uint32_t cfg_number = 0 )		= 0;

	//**********************************************************************
	// Методы должены включать/отключать таймер
	// (не перетерая поля регистров).
	//**********************************************************************
	virtual bool on						( void )						= 0;
	virtual bool off					( void )						= 0;

	//**********************************************************************
	// Метод должен менять коэффициент заполнения без отключения таймера.
	// duty должен находиться в диапазоне от 0 до 1.
	// В противном случае метод автоматически приводит его к 0, если число
	// меньше нуля и к 1, если больше 1.
	//**********************************************************************
	virtual void setDuty				( float duty )					= 0;
};
